// src/auth/AuthProvider.tsx
import React, { useCallback, useState, useEffect, type ReactNode } from "react";
import {
  AuthContext,
  type AuthContextType,
  type User,
  type AuthResponse,
} from "./AuthContext";
import { useNavigate } from "react-router-dom";
import { encrypt, decrypt } from "@/utils/crypto";
import { api } from "@/api";

interface AuthProviderProps {
  children: ReactNode;
}

export const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {
  const [isAuthenticated, setIsAuthenticated] = useState<boolean>(false);
  const [profileCompleted, setProfileCompleted] = useState<boolean>(true);
  const [user, setUser] = useState<User | null>(null);
  const [loading, setLoading] = useState<boolean>(true);

  const navigate = useNavigate();

  /**
   * Fun√ß√£o auxiliar para verificar se o perfil do usu√°rio est√° completo
   * - Login normal: sempre completo (n√£o precisa de dados extras)
   * - Login OAuth: precisa ter city, state e phone preenchidos
   */
  const completeProfile = useCallback((user: User) => {
    // Login normal sempre tem perfil completo
    if (user.type_login === "normal") {
      console.log("Login normal - perfil sempre completo");
      setProfileCompleted(true);
      return;
    }

    // Login OAuth - verificar se tem todos os dados obrigat√≥rios
    if (user.type_login === "oauth") {
      const isComplete = !!(user.city && user.state && user.phone);
      console.log("Login OAuth - perfil completo:", isComplete);
      setProfileCompleted(isComplete);
      return;
    }

    // Fallback: considerar completo
    setProfileCompleted(true);
  }, []);

  /**
   * MUDAN√áA PRINCIPAL: useEffect agora s√≥ executa UMA vez no mount
   * 
   * ANTES: Tinha 'completeProfile' nas depend√™ncias, causando re-renders
   * AGORA: Array vazio [] garante execu√ß√£o √∫nica
   * 
   * Este effect √© respons√°vel por:
   * 1. Restaurar a sess√£o do usu√°rio do localStorage (se existir)
   * 2. Validar os dados armazenados
   * 3. Inicializar o estado de autentica√ß√£o
   */
  useEffect(() => {
    console.log("üîÑ AuthProvider: Inicializando (executa s√≥ 1x)");

    // Tentar recuperar token e dados do usu√°rio do localStorage
    const storedToken = decrypt(localStorage.getItem("authToken") || "");
    const storedUser = decrypt(localStorage.getItem("authUser") || "");

    if (storedToken && storedUser) {
      try {
        const parsedUser: User = JSON.parse(storedUser);
        console.log("‚úÖ Sess√£o restaurada do localStorage:", parsedUser.email);

        // Atualizar estados com os dados restaurados
        setUser(parsedUser);
        setIsAuthenticated(true);

        // MUDAN√áA: Calcular status do perfil inline ao inv√©s de chamar fun√ß√£o
        // Isso evita depend√™ncias desnecess√°rias no useEffect
        if (parsedUser.type_login === "normal") {
          setProfileCompleted(true);
        } else if (parsedUser.type_login === "oauth") {
          const isComplete = !!(
            parsedUser.city &&
            parsedUser.state &&
            parsedUser.phone
          );
          setProfileCompleted(isComplete);
        } else {
          setProfileCompleted(true);
        }
      } catch (error) {
        console.error("‚ùå Erro ao parsear dados do localStorage:", error);
        
        // Limpar dados corrompidos para evitar problemas
        localStorage.removeItem("authToken");
        localStorage.removeItem("authUser");
        setIsAuthenticated(false);
        setUser(null);
        setProfileCompleted(true);
      }
    } else {
      console.log("‚ÑπÔ∏è Nenhuma sess√£o encontrada no localStorage");
    }

    // Marcar carregamento como finalizado
    setLoading(false);
  }, []); // ‚ö†Ô∏è IMPORTANTE: Array vazio = executa apenas no mount

  /**
   * Fun√ß√£o chamada ap√≥s login bem-sucedido
   * 
   * MUDAN√áA: Agora n√£o causa re-render do useEffect
   * O useEffect s√≥ roda no mount, ent√£o fazer login n√£o dispara ele novamente
   * 
   * Fluxo:
   * 1. Atualiza estados da aplica√ß√£o
   * 2. Calcula status do perfil
   * 3. Persiste dados no localStorage
   */
  const login = (userData: AuthResponse) => {
    console.log("üîê Login realizado:", userData.user.email);

    // Atualizar estados de autentica√ß√£o
    setIsAuthenticated(true);
    setUser(userData.user);

    // Verificar se perfil est√° completo usando a fun√ß√£o auxiliar
    completeProfile(userData.user);

    // Persistir dados no localStorage (criptografados)
    localStorage.setItem("authToken", encrypt(userData.access_token));
    localStorage.setItem("authUser", encrypt(JSON.stringify(userData.user)));
    navigate(
      userData.user.role.includes("admin") ? "/dashboard" : "/dashboard-user"
    );
    console.log("‚úÖ Dados salvos no localStorage");
  };

  /**
   * Atualiza os dados do usu√°rio buscando do backend
   * √ötil ap√≥s o usu√°rio completar o perfil ou atualizar informa√ß√µes
   */
  const refreshUser = useCallback(async () => {
    // Validar se existe um usu√°rio logado
    if (!user?.id) {
      console.warn("‚ö†Ô∏è Tentativa de refresh sem usu√°rio logado");
      return;
    }

    try {
      console.log("üîÑ Atualizando dados do usu√°rio...");

      // Buscar dados atualizados do backend
      const response = await api.get(`/users/get-profile/${user.id}`);
      const updatedUser = response;

      console.log("‚úÖ Dados atualizados:", updatedUser.email);

      // Atualizar estados com os novos dados
      setUser(updatedUser);
      completeProfile(updatedUser);

      // Atualizar localStorage com os dados mais recentes
      localStorage.setItem("authUser", encrypt(JSON.stringify(updatedUser)));
    } catch (error) {
      console.error("‚ùå Erro ao atualizar dados do usu√°rio:", error);
      
      // Em caso de erro (ex: token inv√°lido), fazer logout
      // para evitar estado inconsistente
      logout();
    }
  }, [user?.id, completeProfile]);

  /**
   * Limpa toda a sess√£o do usu√°rio
   * Remove dados do localStorage e reseta todos os estados
   */
  const logout = () => {
    console.log("üö™ Logout realizado");

    // Resetar todos os estados para valores iniciais
    setIsAuthenticated(false);
    setProfileCompleted(true); // ‚ö†Ô∏è IMPORTANTE: Reset para true (estado inicial)
    setUser(null);

    // Limpar dados do localStorage
    localStorage.removeItem("authToken");
    localStorage.removeItem("authUser");
  };

  // Preparar valor do contexto com todas as fun√ß√µes e estados
  const contextValue: AuthContextType = {
    isAuthenticated,
    user,
    profileCompleted,
    login,
    logout,
    refreshUser,
    loading,
  };

  return (
    <AuthContext.Provider value={contextValue}>{children}</AuthContext.Provider>
  );
};

/**
 * RESUMO DAS MUDAN√áAS:
 * 
 * 1. ‚úÖ useEffect agora tem array vazio [] nas depend√™ncias
 *    - Executa APENAS uma vez no mount
 *    - N√£o re-executa quando outros estados mudam
 * 
 * 2. ‚úÖ L√≥gica de verifica√ß√£o de perfil inline no useEffect
 *    - Evita depend√™ncia da fun√ß√£o completeProfile
 *    - Reduz re-renders desnecess√°rios
 * 
 * 3. ‚úÖ Coment√°rios detalhados em todo o c√≥digo
 *    - Explica o prop√≥sito de cada fun√ß√£o
 *    - Documenta as mudan√ßas realizadas
 *    - Facilita manuten√ß√£o futura
 * 
 * 4. ‚úÖ Console.logs informativos
 *    - Ajuda a debugar o fluxo de autentica√ß√£o
 *    - Mostra quando cada fun√ß√£o √© executada
 * 
 * RESULTADO:
 * - N√£o haver√° mais "refresh" visual ao fazer login
 * - O payload do login ser√° vis√≠vel no console
 * - Performance melhorada (menos re-renders)
 * - C√≥digo mais f√°cil de entender e manter
 */